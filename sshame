#!/usr/bin/env ruby

# A simple script for extracting failed SSH login attempts from an authenticaton log.
# Please see the README.md file for usage examples.
#
# Copyright 2013 Peat Bakke <peat@peat.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'optparse'

def exit_with_error( msg )
  STDERR.puts msg
  exit 1
end

# default configuration.
cfg = { :threshold => 1 }

OptionParser.new do |o|
  o.on('-h', "Print out this help.") { puts o; exit }
  o.on('-f', '--file FILENAME', String, "Log file to read. Defaults to stdin.") { |f| cfg[:filename] = f }
  o.on('-t', '--threshold NUMBER', Integer, "Threshold for failed authentication attempts. Defaults to #{cfg[:threshold]}.") { |t| cfg[:threshold] = t }
  o.on('-c', '--count', "Includes a count of attempts per IP address.") { |c| cfg[:count] = c }
  o.on('-l', '--list', "Includes a comma delimited list of users per IP address") { |l| cfg[:list] = l }

  begin
    o.parse!
  rescue OptionParser::MissingArgument => e
    exit_with_error(e)
  end
end

# Returns an IO object, or errors if the path is invalid. Defaults to STDIN.
def io_target( path = nil )
  return STDIN if path.nil?  
  return File.open(path) if File.exists? path
  exit_with_error "Could not open file #{path}"
end

# Returns a hash of of authentication attempts for invalid users.
# { ip_address => [ username, username, ... ] }
def invalid_user_attempts( io )
  attempts = {}
  io.each do |line|
    if m = /Invalid user (.*) from (.*)$/i.match(line)
      user_name = m[1]
      ip_address = m[2]

      attempts[ip_address] ||= []
      attempts[ip_address].push user_name
    end
  end
  attempts
end

# Filters a hash based on the number of items in the associated list
def filter_attempt_hash( hash, threshold = 1 )
  keepers = {}
  hash.each do |k,v|
    keepers[k] = v if v.length >= threshold
  end
  keepers
end

# Creates a string to output for a given result set.
# opts may contain:
#   :count    displays the number of results for the given IP address.
#   :list     displays a comma delimited list of users for the given IP address.
def format_result( ip, list, opts = {} )
  out = [ ip ]

  out << list.count if opts[:count]
  out << list.join(',') if opts[:list]

  out.join("\t")
end

results = filter_attempt_hash( invalid_user_attempts( io_target( cfg[:filename] ) ), cfg[:threshold] )
results.each { |k,v| STDOUT.puts format_result( k, v, cfg ) }
